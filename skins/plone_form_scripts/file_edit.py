## Script (Python) "file_edit"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=precondition='', field_file='', field_id='', title=None, description=None, file_data=''
##title=Edit a file
##
from Products.CMFPlone import StringIO
REQUEST=context.REQUEST

file=field_file
id=field_id

if file_data and not hasattr(field_file, 'filename'):
    file=StringIO(file_data)

context.edit(
     precondition=precondition,
     file=file)

errors=context.validate_file_edit()
if errors:
    form=getattr( context, context.getTypeInfo().getActionById( 'edit' ) )
    return form()

if context.isIDAutoGenerated(id) and file.filename:
    if file.filename.find('\\') > -1: # winXX      
        id=file.filename.split('\\')[-1]
    else:
        id=file.filename.split('/')[-1] # *nix
    #if there is a . strip everything before it
    #if id.find('.')>-1: id=id[:id.find('.')]

if not context.isIDAutoGenerated(id):   
    context.REQUEST.set('id', id)

qst='?portal_status_message=File+has+changed.'
REQUEST.set('portal_status_message','File+has+changed.')

if hasattr(context, 'extended_edit'):
    edit_hook=getattr(context, 'extended_edit')
    response=edit_hook(redirect=0)
    if response:
        return response

target_action = context.getTypeInfo().getActionById( 'view' )

context.REQUEST.RESPONSE.redirect( '%s/%s?%s' % ( context.absolute_url()
                                                , target_action
                                                , qst
                                                ) )
