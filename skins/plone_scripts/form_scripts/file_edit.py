## Script (Python) "file_edit"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=precondition='', field_file='', field_id='', title=None, description=None, file_data=''
##title=Edit a file
##
from Products.CMFPlone import transaction_note
from StringIO import StringIO
REQUEST=context.REQUEST

file=field_file
id=field_id

if file_data and not hasattr(field_file, 'filename'):
    file=StringIO(file_data)

context.edit( precondition=precondition,
              file=file )

errors=context.validate_file_edit()
if REQUEST.has_key('errors'):
    form=getattr( context, context.getTypeInfo().getActionById( 'edit' ) )
    return form()

filename=getattr(file,'filename','')
if file and filename: #context.isIDAutoGenerated(id) and filename:
    id=filename[max( string.rfind(filename, '/')
                   , string.rfind(filename, '\\')
                   , string.rfind(filename, ':') )+1:]

if not context.isIDAutoGenerated(id):   
    context.REQUEST.set('id', id)

qst='portal_status_message=File+has+changed.'

context.extended_edit()

context.rename_object(redirect=0, id=id)

tmsg='/'.join(context.portal_url.getRelativeContentPath(context)[:-1])+'/'+context.title_or_id()+' has been modified.'
transaction_note(tmsg)
target_action = context.getTypeInfo().getActionById( 'view' )
context.REQUEST.RESPONSE.redirect( '%s/%s?%s' % ( context.absolute_url()
                                                , target_action
                                                , qst
                                                ) )
