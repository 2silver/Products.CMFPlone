#
# Example functional test using mechanize
#

import os, sys
if __name__ == '__main__':
    execfile(os.path.join(sys.path[0], 'framework.py'))

from Testing import ZopeTestCase
from Products.CMFPlone.tests import PloneTestCase

ZopeTestCase.utils.startZServer()

from Acquisition import aq_base
from Products.CMFPlone.Portal import default_frontpage

from mechanize import Browser
from urllib import urlencode
from urlparse import urlparse
import re

default_user = PloneTestCase.default_user
login_data = urlencode({'__ac_name': default_user,
                        '__ac_password': 'secret'})


class TestFunctionalExample(ZopeTestCase.Functional, PloneTestCase.PloneTestCase):

    def afterSetUp(self):
        # Manually install Plone default frontpage
        self.setRoles(['Manager'])
        self.portal.invokeFactory('Document', 'index_html', title='Welcome to Plone', 
                                   text_format='html', text=default_frontpage) 
        # Fire up mech browser
        self.portal_url = self.portal.absolute_url()
        self.folder_url = self.folder.absolute_url()
        self.b = Browser()

    def testFakeLogin(self):
        # Goto portal passing in authentication
        self.b.open(self.portal_url, login_data)
        # Make sure we have an html page
        self.failUnless(self.b.viewing_html())
        # Make sure we only see the searchform
        self.assertEqual(len(self.b.forms()), 1)

    def testRealLogin(self):
        # Goto portal
        self.b.open(self.portal_url)
        # Access the login portlet.  Here we are referencing the form by index
        # (the login portlet is the second form on the page, after the search
        # form).  In general this is a bad idea -- name your forms!!  E.g., use
        # <form name="myform" ...> so you can use my_form=self.b.forms('myform')
        login_form = self.b.forms()[1]
        # Fill out the form.  The arguments are the names of the input fields.
        login_form['__ac_name'] = default_user
        login_form['__ac_password'] = 'secret'
        # Submit it.  click() clicks on the default form button.  If you have
        # multiple buttons on your field, you can use click('my_button_name')
        # to specify which one to click.
        self.b.open(login_form.click())
        # This is a very lame test to see if we are logged in now.  If we are
        # not logged in, there will be 2 forms: the search form and the login
        # portlet; if we are logged in, there will be only 1.
        self.assertEqual(len(self.b.forms()), 1)
        # This is a somewhat better test to make sure we are logged in: we
        # look for the link to the user's home in the personalize bar.  A
        # more reliable test would be to add an id to the link and to find it
        # by its id (this is in the works).
        link_list = self.b.links(text=default_user)
        self.failUnless(len(link_list) >=  1)

    def testCreateDocument(self):
        # Goto folder_contents of member area and log in by passing in 
        # the username and password in login_data.
        self.b.open(self.folder_url+'/folder_contents', login_data)
        # Select the add form.  We have a named form here, so form selection is
        # nicer.
        self.b.select_form('folderContentsForm')
        # Populate the form: select a Document type.
        self.b['type_name'] = ['Document']
        # Submit it by clicking the Add button.
        self.b.open(self.b.click('folder_factories:method'))

        # Get the post-click url and chop off server info and the query string
        url = urlparse(self.b.geturl())[2]
        # Check the template id in the url
        self.failUnless(url.split('/')[-1] == 'document_edit_form')
        # Get the id of the document we have created from the url (we don't 
        # know it a priori because it has been generated by createObject.
        doc_id = url.split('/')[-2]
        # Make sure the document with the specified id exists in the zodb.
        self.failUnless(getattr(aq_base(self.folder), doc_id) != None)

        # Get the new document's edit form.
        self.b.select_form('edit_form')
        # Specify a new title on the form.
        self.b['title'] = 'My test document'
        # Submit the form.
        self.b.open(self.b.click('form.button.Save'))

        # Get the post-click url and chop off server info and the query string.
        url = urlparse(self.b.geturl())[2]
        # Check the template id in the url.
        self.failUnless(url.split('/')[-1] == 'document_view')
        # Get the document from the zodb using the id obtained earlier.
        doc = getattr(self.folder, doc_id)
        # Verify that the document's title is what we set it to be.
        self.failUnless(doc.Title() == 'My test document')
        

if __name__ == '__main__':
    framework()
else:
    from unittest import TestSuite, makeSuite
    def test_suite():
        suite = TestSuite()
        suite.addTest(makeSuite(TestFunctionalExample))
        return suite
