------------------------
*** PORTAL_FORM:
------------------------
The portal_form tool provides validation and navigation services for forms.
Most (all?) of the built-in objects in Plone are now wired up to use the
portal_form tool.

To see how portal_form works, let's take a look at the process of editing
Links:

The first thing to notice is that link editing occurs via a new type of URL.
Before one edited links by visiting .../myLink/link_edit_form.  The action
of this form was a script, ../myLink/link_edit, which called a validator and
invoked navigation depending on the outcome of the validation.  If
validation failed, you would be shown an error page; if it succeeded, you
would be sent to some final destination page.

The new URL for editing links is ../myLink/portal_form/link_edit_form.  The
action of the new form is itself, ../myLink/portal_form/link_edit_form.  The
portal_form tool intercepts the url's traversal and checks for newly
submitted values.  If it sees new values, portal_form finds a validator for
the form in the form_properties sheet in portal_properties and invokes it on
the new values.  It then looks in the navigation_properties sheet of
portal_properties to see what should happen next and hands off to the
appropriate destination.  Because portal_form handles the invocation of the
validator and the navigation, all your form processing code has to do is to
update your object.

Here's what you need to do to make portal_form work for your forms:

(1) In your form: Change the action of your form so that it submits to
itself (set the action to request/url -- see link_edit_form).
Add a hidden variable called form_submitted and set its value to template/id.
Portal_form tests REQUEST.form_submitted to determine whether a form has been
 submitted or not.  The changes to link_edit_form are commented.

(2) Register a set of validators for your form.  Registration takes place
via a call to portal_form's setValidators() method.  The first argument is
the name of the form, and the second is a list of validators.  For example,

    portal_form.setValidators('link_edit_form', ['validate_id', 'validate_link_edit'])

validate_id is used by most forms to check an object's id.  The validators
in the list are called in order.  Each validator returns a status, a set of errors
(stored in a dictionary), and a status message that is passed along to the next
navigation state.  You can register validators manually through portal_properties/form_properties

(3) Write a validator for your form.  Your validator should return (1) a status
(usually either 'success' or 'failure'), (2) a set of errors in a dictionary, and (3) a
status message to be displayed by the next navigation state.  If your validator is
part of a chain, you may want to access the status / errors / status message returned
by the previous validator in the chain.  These values are all available in the REQUEST
as REQUEST['validation_status'], REQUEST['errors'], and REQUEST['portal_status_message']

(4) Write a form handler.  The handler should modify your object and its metadata from the
REQUEST and then return a status code.  Additional code for invoking the
validator and for performing navigation should be deleted.

(5) Set up your form's desired navigation in portal_navigation


---------------------------------
*** PORTAL_NAVIGATION:
---------------------------------
The portal_navigation tool is part of a controller for handling navigation
in forms.  Navigation is completely configurable through the
navigation_properties sheet in portal_properties.  The format of a
navigation property is as follows:

[type].[action].[status] = [next thing to do]

For example, the navigation for editing a link looks like so:

link.link_edit_form.failure = link_edit_form
link.link_edit_form.success = script:link_edit
link.link_edit.success = action:view

The navigation tool implments the state controller pattern from Design
Patterns, and the navigation_properties sheet is a state transition table.
The left hand side of the navigation properties above indicates the current
state, and the right hand side indicates the transition.

link.link_edit_form.failure = link_edit_form means after receiving an
outcome of 'failure' from validating link_edit_form on a link, re-invoke the
page template link_edit_form on the current context.
link.link_edit_form.success = script:link_edit means after receiving an
outcome of 'success' from validating link_edit_form on a link, invoke the
script link_edit on the current context.
link.link_edit.success = action:view means after receiving an outcome of
'success' from invoking link_edit on a link, perform the view action on the
link.

The transitions specified on the right hand side can be the following:

PAGE_TEMPLATE -- invoke the page template TEMPLATE on the current context
action:ACTION -- invoke the action ACTION on the current context
script:SCRIPT -- invoke the script SCRIPT on the current context
url:URL -- redirect to the specified (absolute) URL

Furthermore, the transitions can incorporate data from the request via
brackets.  For example, url:http://www.zope.org/?myId=[id] will send the
user to the specified URL with [id] replaced by the value of REQUEST.id.


-----------------------------
*** PORTAL_FACTORY:
-----------------------------
The portal_factory tool lets you create new objects without resulting in
orphaned objects if the user bails out of the object creation form before
