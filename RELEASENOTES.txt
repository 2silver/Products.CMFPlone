Plone 3.0 - May, 2007
=====================

The following is a list of important things to note when installing or
upgrading to Plone 3.0:

* Zope 2.10.3+ is now required. Older versions of Zope will not work. Zope 2.11
  and later may or may not work.

* The python ElementTree package is now required. This package can be
  downloaded from its homepage at http://effbot.org/downloads/#elementtree .

* The python lxml package is now required to run all tests. It is
  not needed for normal Plone use. This package can be downloaded
  from its homepage at http://codespeak.net/lxml/ .

* Plone 3.0 uses both Zope Products and python packages. The Zope Products
  are installed in the usual location: the Products directory of the Zope
  instance. Python package may be installed in the lib/python directory in the
  Zope instance, or anywhere on the standard python path.

* The GroupUserFolder user folder is no longer supported; instead Plone
  now requires the Pluggable Authentication System (PAS). It may not be
  possible to upgrade a site using GRUF with external user folders such as
  LDAPUserFolder. In those cases it is advised to create a new site and move
  the content over manually.


Plone 3.0 is still in development
---------------------------------

Plone 3.0 is not finished yet. Some important things to take into account:

* Migration from older sites is not working correctly in Plone 3.0-beta1. This
  will be fixed in beta2.

* the kss related ids and classes are subject to change. They will be fixed in
  beta2.

* the release notes and upgrade instructions are not completed yet.


Important notes for users
-------------------------

* The most significant new feature is undoubtedly KSS - Kinetic Style
  Sheets - or, Plone's Ajax framework. This allows Plone to have a more
  polished user interface elements and more powerful dynamic applications that
  can refresh data in a page without having to reload the entire page. For
  example, you can double-click the title of the page to instantly edit it. Or
  switch between tabs nearly instantly. Or validate form fields before you hit
  submit. And that's just the beginning.

* Plone 3.0 now provides document versioning out of the box. Versioning allows
  you to save old versions of a page, compare your current version to older
  versions, and even to roll back to previous versions. Plone 3.0 also includes
  document staging, the ability to work on a copy of a document while the old
  version is still live.  Finally, Plone 3.0 includes locking, which prevents
  two people from making changes to a document at the same time. Together,
  versioning, staging and locking will make Plone 3.0 very appealing to folks
  who are managing sophisticated sites with multiple people editing content at
  the same time.

* A link integrity feature has been added which can automatically
  detect and prevent broken links in a site, or intelligently redirect users if
  they use a broken link into a site. Plone will now:

  - warn you when you try to delete a page that has incoming links from
    elsewhere on your site

  - automatically create redirects when you move or rename a page that has
    incoming links

* Portlets have been greatly enhanced. There is a new 'manage portlets' option
  available in the site which allows you to

  - instantly add, remove and reorder portlets

  - control whether portlets get inherited from parent folders

  - customize portlets per-user, per-group and per content type

  - configure individual portlets, for example to change the number
    of items shown in portlets.

* Users now have a personal dashboard. They can customise this with
  multiple portlets.
  
* Plone now supports the Google Sitemap protocol, described in 
  https://www.google.com/webmasters/tools/docs/en/protocol.html

  You can switch the sitemap feature on under Site Settings in the Site Setup
  page. When enabled the sitemap.xml.gz file is provided in the root of your
  portal.

* The Plone Tableless skin has been removed. The standard Plone skin makes
  very minimal use of tables and can be flexibly styled, as is demonstrated
  by the new NuPlone theme.

* Content types can now be configured through a new control panel. Using this
  panel a number of new features are available:

  - rich text fields in types can act as wiki fields, making it possible to
    create wiki-style links by surrounding a phrase (( .. ))

* The standard Page type has added two new options: 

  - a toggle which allows pages to be shown as S5 presentations. This makes
    it trivial to create simple presentations in Plone.

  - a table of contents can be generated automatically based on the headers 
    used in the page.

* KSS/Azax

* In addition to the standard four-state workflow Plone has always used
  there Plone now includes special community, intranet, simple publication
  and one-state workflows. Switching between workflows can be done in an
  existing site using a new control panel.

* versioning, staging and locking

* content rules


Important notes for site and system administrators
--------------------------------------------------

For migration instructions please see the online Plone migration manual:
http://plone.org/documentation/manual/migration-guide
XXX this document is not published yet XXX

* Caching related changes required (or maybe none!)

* Plone 3 now uses a new session authentication implementation based on the
  new plone.session package. This system uses a cryptographic hash against
  the userid of a succesfully authenticated user to authenticate sessions.

  This form of session authentication only works for users defined in the
  user folder in the Plone site itself. Users defined in other user folders
  (such as the global admin user defined in the Zope root) will work, but
  use the authentication methods configured in their user folder. This
  means that they will be less secure than users defined in the Plone site.

* Member folders are no longer enabled by default.

Important notes for developers
------------------------------

The latest information on migrating products to Plone 3.0 can be found online
at http://plone.org/documentation/manual/migration-guide/version-specific/adjusting-third-party-products-from-plone-2-5-to-3.0/

* getToolByName has been deprecated in favour of getUtility, queryUtility and
  getToolByInterfaceName. Please see
  http://svn.zope.org/CMF/trunk/docs/ToolsAreUtilities.stx?view=markup for more
  information on this change.

* Searching for users and groups using the portal_membership and portal_groups
  tools has been deprectaed. Please use the search features of PAS directly
  or use the PlonePAS pas_search browser view.

* Portlets have been re-implemented using the Zope3 component architecture.
  The base package, plone.portlets, is usable in plain Zope 3 and has been
  successfully used with Grok. See its README.txt for full details on the
  architecture (you are only likely to need this if you need to understand
  how portlets are wired into Plone's core - you need to know considerably
  less to understand how to use and make portlets, and there is a much
  improved UI for site administrators).
  
  The easiest way to re-use an existing template-based portlet is to use a
  Classic Portlet from the "Manage portlets" screen, although this will suffer
  some performance overhead. It is better to make a new-style portlet. These
  allow you to keep configuration data associated with a particular portlet
  assignment, using formlib, and gives you a well-defined place to put
  Python logic powering the portlet. See plone.app.portlets.portlets for
  plenty of examples, or http://svn.plone.org/svn/collective/collective.portlet.
  
  Note that the left_slots and right_slots properties are no longer used.
  The "manage portlets" screen will allow you to migrate existing properties
  in a particular folder (those at the root of the portal are migrated when
  Plone is upgraded). To manage portlet assignments, use the APIs described
  in plone.portlets.interfaces, or see plone.app.portlets.browser.editmanager.

* Skins: main_template now uses viewlet managers instead of metal macros
  -> Alexander Limi or Florian Schulze to fill in stuff here. Affected
  are at least header.pt, viewThreadsAtBottom and global_contentmenu

* It is no longer possible to define workflows using python code. Instead
  workflows have to be created via a GenericSetup profile.

* The long deprecated Products.CMFCore.CMFPermissions module has been
  removed. Code should now use its replacement Products.CMFCore.permissions

* You can use the contentmigration product to write migrations for your own
  products.  More information on this product can be found in the RichDocument
  tutorial: http://plone.org/documentation/tutorial/richdocument/migrations/

* If you have a custom content type that is derived from ATDocument but does
  not want the document-specific behaviour that is provided on the IATDocument
  interface you should use the new ATDocumentBase base class instead.

* Customising z3 views using customerize

Preferred but not obligatory (right now)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* QuickInstaller-based installation should use GenericSetup profiles instead 

* use events instead of manage_ methods (which will probably disappear in plone
  3.5 or 4.0)

* Packaging technology:

  - Use python packages instead of Zope products. Creating python packages
    is very easy using the paster tool. See
    http://plone.org/documentation/how-to/use-paster/ for more information.

  - Use ploneit or ploneout to create development and/or production
    environments

  - Releasing packages as eggs and registering them with the Python Cheese
    Shop (http://cheeseshop.python.org/) makes it simple for people to
    install them and all required dependencies if they are using a system
    such as ploneout, ploneit or workingenv.

